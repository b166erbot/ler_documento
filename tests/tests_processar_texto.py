from unittest import TestCase
from unittest.mock import MagicMock, patch

# mockando o load e download aqui pois n√£o quero que ele demore na importa√ß√£o
load = MagicMock()
download = MagicMock()
patch('spacy.load', load).start()
patch('spacy.cli.download', download).start()

from src.processar_texto import configurar_nlp, processar


class TestConfigurarNlp(TestCase):
    #mockando novamente pois quero que cada load e download sejam novos
    @patch('src.processar_texto.load')
    def test_load_carregando_caso_tenha_a_lingua_selecionada(self, load):
        configurar_nlp('p√£o')
        load.assert_called_once()
        # tem a l√≠ngua p√£o üòÉ
    
    @patch('src.processar_texto.download')
    @patch('src.processar_texto.load', side_effect = [OSError, ''])
    def test_baixando_e_carregando_a_lingua_caso_n√£o_tenha_a_lingua_dispon√≠vel(
        self, load, download
    ):
        configurar_nlp('p√£o')
        self.assertEqual(load.call_count, 2)
        download.assert_called_once()
        # deu erro mas ainda tem a l√≠ngua p√£o üòÉ


class TestProcessar(TestCase):
    @patch('src.processar_texto.nlp')
    def test_processar_retornando_os_textos_das_senten√ßas(self, nlp):
        nlp().sents = [MagicMock(text = texto) for texto in ['p√£o'] * 3]
        esperado = ['p√£o'] * 3
        # √© necess√°rio transformar em lista pois ele retorna um map
        resultado = list(processar(
            'tanto faz esse texto aqui, n√£o influencia no teste.'
        ))
        self.assertEqual(esperado, resultado)